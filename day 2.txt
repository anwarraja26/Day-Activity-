ARRAYS 

```cpp
let a=[12,12.3,"anwar",0]
a.push(40)
a.push([34,23,12,45])
a[5].push(70)
console.log(a)

```

Unshift is function in 

It is used to add the data is stored in the beginning of the array 

Shift → It is used to remove the first element n

push →It is used to push the element into the array 

## delete

```cpp
let a=[32,24,4,32,"raja"]
delete a[1]
console.log(a);
```

## splice

```cpp
let a=[32,24,4,32,"raja"]
a.splice(1,3,"anwar")
console.log(a)

console.log(a.length)

```

## Enhanced for loop

```cpp
let a=[32,24,4,32,"raja"]
for(let data of a)
console.log(data)

```

## Splice in array

```jsx
let a=[32,24,4,32,"raja"]
let b=a.slice(1,4) // return type of slice is new array
console.log(b)

```

## 

Class object accessing representation

- Using the dot notation
- Using the square bracket notation

```jsx
let person={
    name:"anwar",
    age:18
}
//Using dot notation
person.name="raja"
// square bracket notation
person["age"]=19
// deletion using the delete keyword
console.log(person)
console.log("after delete")
delete person.age
console.log(person)
```

```jsx
let person=[{
    name:"anwar",
    age:18
},{name:"raja",
    age:20
}]
for(let a of person)
console.log(`Name is ${a.name} and age is ${a.age}`)
```

# Representing or printing using the square bracket notation

```jsx
let person={
    name:"anwar",
    age:18
}

for(let key in person)
console.log(key, " : ",person[key]) 
```

# Destructuring in js

```jsx
let person={
    name:"anwar",
    roll:15,
    age:40
}
let{name,roll,age}=person
console.log(`Name is ${name} roll number is ${roll} and age is ${age}`)
```

# Destructuring using the alias name

```jsx
let person={
    n:"anwar",
    r:15,
    a:40
}
let{n:name,r:roll,a:age}=person
console.log(`Name is ${name} roll number is ${roll} and age is ${age}`)
```

# Destructuring using the default value

```jsx
let person={
    n:"anwar",
    r:15,
    a:40
}
let{n:name,r:roll,a:age,city="CBE"}=person
console.log(`Name is ${name} roll number is ${roll} and age is ${age} and city is ${city}`)
```

# Rest Operator

```jsx
let person={
    n:"anwar",
    r:15,
    a:40
}
let{n:name,...restdatas}=person
console.log(`My name is ${name}`)
console.log(restdatas)
```

### Array Destructuring

```jsx
let a=[1,2,3,4]
let[p,q,r,s]=a
console.log(p,q, r, s)
```

### Array Destructuring by skipping data

```jsx
let a=[1,2,3,4]
let[p,,,s]=a
console.log(p,s)
```

### Array Destructuring using rest operator

```jsx
let a=[1,2,3,4]
let[p,q,...rest]=a
console.log(p,q,rest)
```

## Concatinating two array using the rest operator